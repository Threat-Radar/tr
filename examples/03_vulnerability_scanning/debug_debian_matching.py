"""Debug script to understand CVE matching with different thresholds."""
from threat_radar.core.vulnerability_scanner import VulnerabilityScanner, ScanConfiguration
from threat_radar.core.cve_matcher import CVEMatcher
from threat_radar.core.nvd_client import NVDClient
from threat_radar.utils import docker_analyzer


def debug_matching():
    """Debug CVE matching with multiple thresholds."""

    print("=" * 70)
    print("DEBUG: CVE Matching Analysis for Debian 8")
    print("=" * 70)

    # Analyze container
    print("\n[1] Analyzing Debian 8...")
    with docker_analyzer() as analyzer:
        analysis = analyzer.import_container("debian", "8")

    print(f"Found {len(analysis.packages)} packages")

    # Get some CVEs
    print("\n[2] Fetching sample CVEs...")
    client = NVDClient()

    # Get specific CVEs we know should match
    print("  Fetching Shellshock (CVE-2014-6271)...")
    shellshock = client.get_cve_by_id('CVE-2014-6271')

    print("  Fetching bash CVEs...")
    bash_cves = client.search_cves(keyword='bash', results_per_page=10)

    print("  Fetching glibc CVEs...")
    glibc_cves = client.search_cves(keyword='glibc', results_per_page=10)

    client.close()

    all_cves = [shellshock] + bash_cves + glibc_cves
    all_cves = [cve for cve in all_cves if cve]  # Remove None

    print(f"\nTotal CVEs to test: {len(all_cves)}")

    # Find bash package
    bash_pkg = None
    for pkg in analysis.packages:
        if pkg.name == 'bash':
            bash_pkg = pkg
            print(f"\nFound bash package: {pkg.name} {pkg.version}")
            break

    if not bash_pkg:
        print("ERROR: No bash package found!")
        return

    # Test with different thresholds
    thresholds = [0.5, 0.6, 0.7, 0.75, 0.8]

    print("\n" + "=" * 70)
    print("TESTING DIFFERENT CONFIDENCE THRESHOLDS")
    print("=" * 70)

    for threshold in thresholds:
        print(f"\n--- Threshold: {threshold} ---")

        matcher = CVEMatcher(
            min_confidence=threshold,
            max_cve_age_years=15,
            filter_disputed=True
        )

        matches = matcher.match_package(bash_pkg, all_cves)

        print(f"Matches found: {len(matches)}")

        if matches:
            for match in matches[:3]:
                print(f"  ✓ {match.cve.cve_id}: {match.confidence:.2f} confidence")
                print(f"    {match.match_reason}")
                print(f"    Version match: {match.version_match}")
        else:
            print("  No matches")

    # Detailed analysis of Shellshock specifically
    print("\n" + "=" * 70)
    print("DETAILED ANALYSIS: Shellshock vs bash")
    print("=" * 70)

    print(f"\nBash package:")
    print(f"  Name: {bash_pkg.name}")
    print(f"  Version: {bash_pkg.version}")

    if shellshock:
        print(f"\nShellshock CVE:")
        print(f"  ID: {shellshock.cve_id}")
        print(f"  Published: {shellshock.published_date}")
        print(f"  Severity: {shellshock.severity}")
        print(f"  CVSS: {shellshock.cvss_score}")

        print(f"\n  Affected products ({len(shellshock.affected_products)} total):")
        for prod in shellshock.affected_products[:5]:
            cpe = prod.get('cpe23Uri', '')
            print(f"    - {cpe}")
            if 'versionStartIncluding' in prod or 'versionEndIncluding' in prod:
                print(f"      Range: {prod.get('versionStartIncluding', '*')} to {prod.get('versionEndIncluding', '*')}")

        # Manual matching test
        print(f"\n  Testing manual match...")
        matcher_low = CVEMatcher(min_confidence=0.5, max_cve_age_years=None, filter_disputed=False)
        manual_match = matcher_low.match_package(bash_pkg, [shellshock])

        if manual_match:
            match = manual_match[0]
            print(f"  ✅ MATCH FOUND!")
            print(f"     Confidence: {match.confidence:.2%}")
            print(f"     Reason: {match.match_reason}")
            print(f"     Version match: {match.version_match}")
            print(f"     CPE: {match.cpe_uri}")
        else:
            print(f"  ❌ NO MATCH - This is unexpected!")

    # Test all packages using scanner
    print("\n" + "=" * 70)
    print("BULK MATCH TEST (threshold 0.75)")
    print("=" * 70)

    config = ScanConfiguration(
        min_confidence=0.75,
        max_cve_age_years=15,
        filter_disputed=True
    )

    scanner = VulnerabilityScanner(config)
    bulk_matches = scanner.scan(analysis, all_cves)

    print(f"\nVulnerable packages: {len(bulk_matches)}")
    for pkg_name, pkg_matches in bulk_matches.items():
        print(f"  - {pkg_name}: {len(pkg_matches)} CVEs")
        for match in pkg_matches[:2]:
            print(f"    • {match.cve.cve_id} ({match.confidence:.0%})")


if __name__ == "__main__":
    try:
        debug_matching()
    except Exception as e:
        print(f"\nError: {e}")
        import traceback
        traceback.print_exc()
