"""
Demonstration with actual vulnerability findings.

This example scans Ubuntu 14.04 which contains unpatched versions of bash
and other packages with known CVEs.
"""
from threat_radar.core.vulnerability_scanner import VulnerabilityScanner, ScanConfiguration
from threat_radar.utils.report_generator import VulnerabilityReportGenerator
from threat_radar.utils import docker_analyzer
import os


def demo_with_real_findings():
    """Scan an image with actual vulnerable packages."""

    print("=" * 70)
    print("VULNERABILITY SCAN: Ubuntu 14.04 (Known Vulnerable Packages)")
    print("=" * 70)

    # Ubuntu 14.04 has bash 4.3-7 which is vulnerable to Shellshock
    image = "ubuntu:14.04"

    print(f"\nTarget Image: {image}")
    print("Note: This older image contains unpatched packages")
    print()

    # Step 1: Analyze container
    print("[1/4] Pulling and analyzing Docker image...")
    with docker_analyzer() as analyzer:
        image_name, tag = image.split(':')
        analysis = analyzer.import_container(image_name, tag)

    print(f"     ‚úì Found {len(analysis.packages)} packages")
    print(f"     ‚úì Distribution: {analysis.distro} {analysis.distro_version}")
    print(f"     ‚úì Architecture: {analysis.architecture}")

    # Show critical packages and their versions
    print(f"\nCritical System Packages:")
    important_packages = {'bash', 'coreutils', 'gzip', 'tar', 'grep', 'sed'}
    for pkg in analysis.packages:
        if pkg.name in important_packages:
            print(f"  - {pkg.name:15s} {pkg.version}")

    # Step 2: Configure scanner and fetch CVEs
    print(f"\n[2/4] Fetching CVEs for key packages...")

    config = ScanConfiguration(
        min_confidence=0.75,
        max_cve_age_years=15,
        filter_disputed=True,
        high_profile_cves=['CVE-2014-6271'],  # Shellshock
        cve_search_keywords=[
            ('bash', 15),
            ('gzip', 10),
            ('tar', 10),
            ('grep', 10),
        ]
    )

    scanner = VulnerabilityScanner(config)

    print(f"     Fetching Shellshock CVE...")
    cves = scanner.fetch_cves(
        keywords=config.cve_search_keywords,
        cve_ids=config.high_profile_cves
    )

    print(f"\n     Total unique CVEs loaded: {len(cves)}")

    # Step 3: Match packages against CVEs
    print(f"\n[3/4] Matching packages against vulnerabilities...")
    print(f"     Using improved matching with:")
    print(f"       - Confidence threshold: {config.min_confidence}")
    print(f"       - Max CVE age: {config.max_cve_age_years} years")
    print(f"       - Filter disputed CVEs: {config.filter_disputed}")

    matches = scanner.scan(analysis, cves)

    stats = scanner.calculate_statistics(matches)

    print(f"     ‚úì Found {stats['vulnerable_packages']} vulnerable packages")
    print(f"     ‚úì Total vulnerabilities detected: {stats['total_vulnerabilities']}")

    # Step 4: Display results using report generator
    print(f"\n[4/4] Vulnerability Report:")
    print("=" * 70)

    reporter = VulnerabilityReportGenerator()

    # Print findings
    reporter.print_findings(matches, analysis, max_per_package=5)

    # Print summary
    reporter.print_summary(image, analysis, stats)

    # Generate and save JSON report
    report = reporter.generate_json_report(image, analysis, matches, stats)

    output_dir = os.path.join(os.path.dirname(__file__), '..', 'output')
    report_file = os.path.join(output_dir, "ubuntu_14.04_vulnerability_report.json")

    reporter.save_report(report, report_file)

    print(f"\nüìÑ Detailed report saved to: {report_file}")

    print("\n" + "=" * 70)
    print("‚úÖ SCAN COMPLETE")
    print("=" * 70)

    print("\nüí° Key Findings:")
    print(f"   - This {image} image contains {stats['vulnerable_packages']} packages with known CVEs")
    print(f"   - Total of {stats['total_vulnerabilities']} vulnerabilities detected")

    critical_count = stats['severity_breakdown'].get('CRITICAL', 0)
    if critical_count > 0:
        print(f"   - ‚ö†Ô∏è  {critical_count} CRITICAL vulnerabilities found!")

    print(f"\nüí° Recommendation:")
    print(f"   - Upgrade to ubuntu:22.04 or ubuntu:24.04 for patched packages")
    print(f"   - Review the JSON report for detailed vulnerability information")

    print()


if __name__ == "__main__":
    print("\n" + "=" * 70)
    print("THREAT RADAR - VULNERABILITY DETECTION DEMONSTRATION")
    print("=" * 70)
    print()
    print("This demo scans Ubuntu 14.04, which contains known vulnerable packages.")
    print("You should see actual CVE matches, including the famous Shellshock vulnerability.")
    print()

    try:
        demo_with_real_findings()

        print("\nüí° Next Steps:")
        print("   - Try scanning: ubuntu:18.04 (newer, fewer CVEs)")
        print("   - Try scanning: debian:9 (different distro)")
        print("   - Use NVD API key for more comprehensive CVE coverage")
        print("   - Run: threat-radar cve update --days 365 to build local database")

    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  Scan interrupted by user")
    except Exception as e:
        print(f"\n\n‚ùå Error: {e}")
        import traceback
        traceback.print_exc()
        print("\nTroubleshooting:")
        print("  1. Ensure Docker is running: docker ps")
        print("  2. Check internet connection for NVD API")
        print("  3. See examples/TROUBLESHOOTING.md for help")
