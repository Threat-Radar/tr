"""
Demonstration with actual vulnerability findings.

This example scans Ubuntu 14.04 which contains unpatched versions of bash
and other packages with known CVEs.
"""
from threat_radar.core.container_analyzer import ContainerAnalyzer
from threat_radar.core.nvd_client import NVDClient
from threat_radar.core.cve_matcher import CVEMatcher
from threat_radar.utils import docker_analyzer
import json
from datetime import datetime


def demo_with_real_findings():
    """Scan an image with actual vulnerable packages."""

    print("=" * 70)
    print("VULNERABILITY SCAN: Ubuntu 14.04 (Known Vulnerable Packages)")
    print("=" * 70)

    # Ubuntu 14.04 has bash 4.3-7 which is vulnerable to Shellshock
    image = "ubuntu:14.04"

    print(f"\nTarget Image: {image}")
    print("Note: This older image contains unpatched packages")
    print()

    # Step 1: Analyze container
    print("[1/4] Pulling and analyzing Docker image...")
    with docker_analyzer() as analyzer:
        image_name, tag = image.split(':')
        analysis = analyzer.import_container(image_name, tag)

    print(f"     ‚úì Found {len(analysis.packages)} packages")
    print(f"     ‚úì Distribution: {analysis.distro} {analysis.distro_version}")
    print(f"     ‚úì Architecture: {analysis.architecture}")

    # Show critical packages and their versions
    print(f"\nCritical System Packages:")
    important_packages = {'bash', 'coreutils', 'gzip', 'tar', 'grep', 'sed'}
    for pkg in analysis.packages:
        if pkg.name in important_packages:
            print(f"  - {pkg.name:15s} {pkg.version}")

    # Step 2: Fetch CVEs for these specific packages
    print(f"\n[2/4] Fetching CVEs for key packages...")
    client = NVDClient()

    all_cves = []

    # First, get Shellshock specifically (guaranteed true positive for Ubuntu 14.04)
    print(f"     Fetching Shellshock CVE...")
    try:
        shellshock = client.get_cve_by_id('CVE-2014-6271')
        if shellshock:
            all_cves.append(shellshock)
            print(f"     ‚úì Found Shellshock (CVE-2014-6271)")
    except Exception as e:
        print(f"     ‚ö† Error fetching Shellshock: {e}")

    # Fetch CVEs for packages we know are vulnerable
    search_terms = {
        'bash': 15,      # Shellshock and related
        'gzip': 10,      # Various compression CVEs
        'tar': 10,       # Archive CVEs
        'grep': 10,      # GNU grep CVEs
    }

    for keyword, limit in search_terms.items():
        print(f"     Fetching {keyword} CVEs...")
        try:
            cves = client.search_cves(keyword=keyword, results_per_page=limit)
            all_cves.extend(cves)
            print(f"     ‚úì Found {len(cves)} CVEs")
        except Exception as e:
            print(f"     ‚ö† Error: {e}")

    client.close()

    # Remove duplicates
    unique_cves = {cve.cve_id: cve for cve in all_cves}.values()
    cves = list(unique_cves)

    print(f"\n     Total unique CVEs loaded: {len(cves)}")

    # Step 3: Match packages against CVEs
    print(f"\n[3/4] Matching packages against vulnerabilities...")
    print(f"     Using improved matching with:")
    print(f"       - Confidence threshold: 0.75")
    print(f"       - Max CVE age: 15 years")
    print(f"       - Filter disputed CVEs: Yes")

    matcher = CVEMatcher(
        min_confidence=0.75,
        max_cve_age_years=15,
        filter_disputed=True
    )
    matches = matcher.bulk_match_packages(analysis.packages, cves)

    vulnerable_count = len(matches)
    total_vulns = sum(len(m) for m in matches.values())

    print(f"     ‚úì Found {vulnerable_count} vulnerable packages")
    print(f"     ‚úì Total vulnerabilities detected: {total_vulns}")

    # Step 4: Display results
    print(f"\n[4/4] Vulnerability Report:")
    print("=" * 70)

    if matches:
        print("\nVULNERABILITY FINDINGS")
        print("=" * 70)

        # Sort by severity
        severity_order = {"CRITICAL": 0, "HIGH": 1, "MEDIUM": 2, "LOW": 3, None: 4}

        for pkg_name in sorted(matches.keys()):
            pkg_matches = matches[pkg_name]

            # Sort matches by severity
            pkg_matches.sort(key=lambda m: (
                severity_order.get(m.cve.severity, 4),
                -(m.cve.cvss_score or 0)
            ))

            # Find package version
            pkg_version = None
            for pkg in analysis.packages:
                if pkg.name == pkg_name:
                    pkg_version = pkg.version
                    break

            print(f"\nüì¶ Package: {pkg_name} {pkg_version or ''}")
            print(f"   Vulnerabilities: {len(pkg_matches)}")

            # Show top 5 for each package
            for i, match in enumerate(pkg_matches[:5], 1):
                severity_icon = {
                    "CRITICAL": "üî¥",
                    "HIGH": "üü†",
                    "MEDIUM": "üü°",
                    "LOW": "üü¢"
                }.get(match.cve.severity, "‚ö™")

                print(f"\n   {severity_icon} [{i}] {match.cve.cve_id}")
                print(f"       Severity: {match.cve.severity or 'N/A'}")
                print(f"       CVSS Score: {match.cve.cvss_score or 'N/A'}")
                print(f"       Confidence: {match.confidence:.0%}")
                print(f"       Match: {match.match_reason}")

                # Version match details
                if match.version_match:
                    print(f"       ‚úì Version is in vulnerable range")
                else:
                    print(f"       ‚ö† Name match only (version not in range)")

                # Truncate description
                desc = match.cve.description
                if len(desc) > 100:
                    desc = desc[:100] + "..."
                print(f"       {desc}")

            if len(pkg_matches) > 5:
                print(f"\n   ... and {len(pkg_matches) - 5} more vulnerabilities")

        # Summary statistics
        print("\n" + "=" * 70)
        print("SUMMARY")
        print("=" * 70)

        severity_breakdown = {}
        for pkg_matches in matches.values():
            for match in pkg_matches:
                sev = match.cve.severity or "UNKNOWN"
                severity_breakdown[sev] = severity_breakdown.get(sev, 0) + 1

        print(f"\nImage: {image}")
        print(f"Total Packages Scanned: {len(analysis.packages)}")
        print(f"Vulnerable Packages: {vulnerable_count}")
        print(f"Total Vulnerabilities: {total_vulns}")

        print(f"\nSeverity Breakdown:")
        for sev in ["CRITICAL", "HIGH", "MEDIUM", "LOW", "UNKNOWN"]:
            count = severity_breakdown.get(sev, 0)
            if count > 0:
                print(f"  {sev:8s}: {count:3d}")

        # Generate JSON report
        report = {
            "scan_timestamp": datetime.now().isoformat(),
            "image": image,
            "distribution": f"{analysis.distro} {analysis.distro_version}",
            "architecture": analysis.architecture,
            "total_packages": len(analysis.packages),
            "vulnerable_packages": vulnerable_count,
            "total_vulnerabilities": total_vulns,
            "severity_breakdown": severity_breakdown,
            "findings": []
        }

        # Add detailed findings
        for pkg_name, pkg_matches in matches.items():
            for match in pkg_matches:
                report["findings"].append({
                    "package": pkg_name,
                    "cve_id": match.cve.cve_id,
                    "severity": match.cve.severity,
                    "cvss_score": match.cve.cvss_score,
                    "confidence": round(match.confidence, 2),
                    "version_match": match.version_match,
                    "match_reason": match.match_reason,
                    "description": match.cve.description,
                    "published_date": match.cve.published_date,
                })

        # Save report to output directory
        import os
        output_dir = os.path.join(os.path.dirname(__file__), '..', 'output')
        os.makedirs(output_dir, exist_ok=True)

        report_file = os.path.join(output_dir, "ubuntu_14.04_vulnerability_report.json")
        with open(report_file, 'w') as f:
            json.dump(report, f, indent=2)

        print(f"\nüìÑ Detailed report saved to: {report_file}")

        print("\n" + "=" * 70)
        print("‚úÖ SCAN COMPLETE")
        print("=" * 70)

        print("\nüí° Key Findings:")
        print(f"   - This {image} image contains {vulnerable_count} packages with known CVEs")
        print(f"   - Total of {total_vulns} vulnerabilities detected")

        critical_count = severity_breakdown.get('CRITICAL', 0)
        if critical_count > 0:
            print(f"   - ‚ö†Ô∏è  {critical_count} CRITICAL vulnerabilities found!")

        print(f"\nüí° Recommendation:")
        print(f"   - Upgrade to ubuntu:22.04 or ubuntu:24.04 for patched packages")
        print(f"   - Review the JSON report for detailed vulnerability information")

    else:
        print("\n‚úÖ No vulnerabilities detected")
        print("   (This may indicate the matching criteria is too strict)")

    print()


if __name__ == "__main__":
    print("\n" + "=" * 70)
    print("THREAT RADAR - VULNERABILITY DETECTION DEMONSTRATION")
    print("=" * 70)
    print()
    print("This demo scans Ubuntu 14.04, which contains known vulnerable packages.")
    print("You should see actual CVE matches, including the famous Shellshock vulnerability.")
    print()

    try:
        demo_with_real_findings()

        print("\nüí° Next Steps:")
        print("   - Try scanning: ubuntu:18.04 (newer, fewer CVEs)")
        print("   - Try scanning: debian:9 (different distro)")
        print("   - Use NVD API key for more comprehensive CVE coverage")
        print("   - Run: threat-radar cve update --days 365 to build local database")

    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  Scan interrupted by user")
    except Exception as e:
        print(f"\n\n‚ùå Error: {e}")
        import traceback
        traceback.print_exc()
        print("\nTroubleshooting:")
        print("  1. Ensure Docker is running: docker ps")
        print("  2. Check internet connection for NVD API")
        print("  3. See examples/TROUBLESHOOTING.md for help")
