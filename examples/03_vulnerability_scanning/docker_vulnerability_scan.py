"""
Complete Docker vulnerability scanning workflow using Grype.

This example demonstrates:
- Scanning Docker images for vulnerabilities using Grype
- Filtering results by severity
- Generating vulnerability reports
- Comparing vulnerability counts across images

NOTE: This example requires Grype to be installed:
  macOS: brew install grype
  Linux: curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh

Docker images will be automatically pulled if they're not available locally.
"""
from threat_radar.core.grype_integration import GrypeClient, GrypeSeverity
from threat_radar.core.container_analyzer import ContainerAnalyzer
from threat_radar.utils import docker_analyzer
import json
from datetime import datetime
import os


def example1_basic_scan():
    """Example 1: Basic vulnerability scan of a Docker image using Grype."""
    print("=" * 70)
    print("Example 1: Basic Docker Image Vulnerability Scan with Grype")
    print("=" * 70)

    image = "alpine:3.18"

    print(f"\nTarget Image: {image}")
    print("Scanning with Grype for vulnerabilities...")
    print("(This may take a minute on first run)\n")

    # Initialize Grype client
    grype = GrypeClient()

    # Scan the image
    scan_result = grype.scan_docker_image(image)

    print(f"✓ Scan complete!")
    print(f"\nResults for {scan_result.target}:")
    print(f"  Total vulnerabilities: {scan_result.total_count}")

    if scan_result.severity_counts:
        print(f"\n  Severity Breakdown:")
        for severity in ['critical', 'high', 'medium', 'low', 'negligible']:
            count = scan_result.severity_counts.get(severity, 0)
            if count > 0:
                print(f"    {severity.upper():12s}: {count}")

    # Show sample vulnerabilities
    if scan_result.vulnerabilities:
        print(f"\n  Sample Vulnerabilities (first 5):")
        for vuln in scan_result.vulnerabilities[:5]:
            fixed_str = f"→ {vuln.fixed_in_version}" if vuln.fixed_in_version else "(no fix)"
            print(f"    • {vuln.id:20s} {vuln.severity.upper():10s} "
                  f"{vuln.package_name}@{vuln.package_version} {fixed_str}")
    else:
        print(f"\n  ✓ No vulnerabilities found!")


def example2_scan_with_severity_filter():
    """Example 2: Scan and filter by severity (HIGH and above)."""
    print("\n" + "=" * 70)
    print("Example 2: Scan with Severity Filtering")
    print("=" * 70)

    image = "ubuntu:20.04"

    print(f"\nTarget Image: {image}")
    print("Scanning and filtering for HIGH and CRITICAL vulnerabilities...")

    grype = GrypeClient()

    # Scan the image
    scan_result = grype.scan_docker_image(image)

    # Filter for HIGH and CRITICAL only
    filtered_result = scan_result.filter_by_severity(GrypeSeverity.HIGH)

    print(f"\n✓ Scan complete!")
    print(f"\nAll vulnerabilities: {scan_result.total_count}")
    print(f"HIGH and CRITICAL only: {filtered_result.total_count}")

    if filtered_result.severity_counts:
        print(f"\nSeverity Breakdown (HIGH+):")
        for severity in ['critical', 'high']:
            count = filtered_result.severity_counts.get(severity, 0)
            if count > 0:
                print(f"  {severity.upper():12s}: {count}")

    # Display HIGH and CRITICAL vulnerabilities
    if filtered_result.vulnerabilities:
        print(f"\nHIGH and CRITICAL Vulnerabilities:")
        for vuln in filtered_result.vulnerabilities[:10]:  # Show first 10
            fixed = f"Fix: {vuln.fixed_in_version}" if vuln.fixed_in_version else "No fix available"
            print(f"\n  {vuln.severity.upper()} - {vuln.id}")
            print(f"    Package: {vuln.package_name}@{vuln.package_version}")
            print(f"    {fixed}")
            if vuln.description:
                desc = vuln.description[:100] + "..." if len(vuln.description) > 100 else vuln.description
                print(f"    {desc}")
    else:
        print("\n  ✓ No HIGH or CRITICAL vulnerabilities found!")


def example3_generate_report():
    """Example 3: Generate detailed vulnerability report and save to JSON."""
    print("\n" + "=" * 70)
    print("Example 3: Generate Vulnerability Report")
    print("=" * 70)

    image = "alpine:3.18"

    print(f"\nScanning {image}...")

    grype = GrypeClient()
    scan_result = grype.scan_docker_image(image)

    # Generate report structure
    report = {
        "scan_date": datetime.now().isoformat(),
        "scanner": "Grype",
        "target": scan_result.target,
        "total_vulnerabilities": scan_result.total_count,
        "severity_counts": scan_result.severity_counts,
        "vulnerabilities": []
    }

    # Add vulnerability details
    for vuln in scan_result.vulnerabilities:
        report["vulnerabilities"].append({
            "id": vuln.id,
            "severity": vuln.severity,
            "package_name": vuln.package_name,
            "package_version": vuln.package_version,
            "package_type": vuln.package_type,
            "fixed_in_version": vuln.fixed_in_version,
            "description": vuln.description,
            "cvss_score": vuln.cvss_score,
            "urls": vuln.urls,
            "data_source": vuln.data_source,
        })

    # Save report to output directory
    output_dir = os.path.join(os.path.dirname(__file__), '..', 'output')
    os.makedirs(output_dir, exist_ok=True)

    safe_name = scan_result.target.replace(':', '_').replace('/', '_')
    report_file = os.path.join(output_dir, f"vulnerability_report_{safe_name}.json")

    with open(report_file, 'w') as f:
        json.dump(report, f, indent=2)

    print(f"\n✓ Report saved: {report_file}")
    print(f"\nReport Summary:")
    print(f"  Target: {report['target']}")
    print(f"  Total Vulnerabilities: {report['total_vulnerabilities']}")

    # Severity breakdown
    if report['severity_counts']:
        print(f"\n  Severity Breakdown:")
        for severity in ['critical', 'high', 'medium', 'low', 'negligible']:
            count = report['severity_counts'].get(severity, 0)
            if count > 0:
                print(f"    {severity.upper():12s}: {count}")

    print(f"\n  Report format: JSON")
    print(f"  File size: {os.path.getsize(report_file):,} bytes")


def example4_compare_images():
    """Example 4: Compare vulnerabilities between two image versions."""
    print("\n" + "=" * 70)
    print("Example 4: Compare Images for Vulnerabilities")
    print("=" * 70)

    images = ["alpine:3.17", "alpine:3.18"]

    print("\nScanning both images with Grype...")

    grype = GrypeClient()
    results = {}

    for image in images:
        print(f"\n  Scanning {image}...")
        scan_result = grype.scan_docker_image(image)

        results[image] = {
            "total_vulns": scan_result.total_count,
            "critical": scan_result.severity_counts.get('critical', 0),
            "high": scan_result.severity_counts.get('high', 0),
            "medium": scan_result.severity_counts.get('medium', 0),
            "low": scan_result.severity_counts.get('low', 0),
        }

    # Display comparison
    print("\n" + "=" * 70)
    print("Comparison Results:")
    print("=" * 70)

    for image, stats in results.items():
        print(f"\n{image}:")
        print(f"  Total Vulnerabilities: {stats['total_vulns']}")
        print(f"  CRITICAL: {stats['critical']}")
        print(f"  HIGH:     {stats['high']}")
        print(f"  MEDIUM:   {stats['medium']}")
        print(f"  LOW:      {stats['low']}")

    # Determine safer image
    safer = min(results.items(), key=lambda x: x[1]['total_vulns'])
    print(f"\n✓ Recommendation: {safer[0]} has fewer vulnerabilities ({safer[1]['total_vulns']} vs {[r for r in results.items() if r[0] != safer[0]][0][1]['total_vulns']})")


def example5_only_fixable_vulns():
    """Example 5: Show only vulnerabilities that have fixes available."""
    print("\n" + "=" * 70)
    print("Example 5: Filter for Fixable Vulnerabilities")
    print("=" * 70)

    image = "ubuntu:20.04"

    print(f"\nScanning {image} (showing only vulnerabilities with fixes)...")

    grype = GrypeClient()
    scan_result = grype.scan_docker_image(image)

    # Filter for vulnerabilities with fixes
    fixable_vulns = [v for v in scan_result.vulnerabilities if v.fixed_in_version]
    unfixable_vulns = [v for v in scan_result.vulnerabilities if not v.fixed_in_version]

    print(f"\n✓ Scan complete!")
    print(f"\nVulnerability Summary:")
    print(f"  Total: {scan_result.total_count}")
    print(f"  Fixable: {len(fixable_vulns)}")
    print(f"  No fix available: {len(unfixable_vulns)}")

    # Display fixable vulnerabilities
    if fixable_vulns:
        print(f"\nFixable Vulnerabilities (first 10):")
        for vuln in fixable_vulns[:10]:
            print(f"\n  {vuln.severity.upper()} - {vuln.id}")
            print(f"    Package: {vuln.package_name}@{vuln.package_version}")
            print(f"    Fix: Upgrade to {vuln.fixed_in_version}")
    else:
        print("\n  ✓ All vulnerabilities have been patched or no fixes available")


def example6_multi_image_scan():
    """Example 6: Scan multiple images in a batch."""
    print("\n" + "=" * 70)
    print("Example 6: Batch Scan Multiple Images")
    print("=" * 70)

    images_to_scan = ["alpine:3.18", "nginx:alpine", "python:3.11-slim"]

    print("\nScanning multiple images...")
    print("(Useful for monitoring CI/CD pipelines or production containers)\n")

    grype = GrypeClient()
    results = []

    for image in images_to_scan:
        print(f"  Scanning {image}...")

        try:
            scan_result = grype.scan_docker_image(image)

            results.append({
                "image": image,
                "total": scan_result.total_count,
                "critical": scan_result.severity_counts.get('critical', 0),
                "high": scan_result.severity_counts.get('high', 0),
            })
        except Exception as e:
            print(f"    ✗ Error scanning {image}: {e}")
            results.append({
                "image": image,
                "total": 0,
                "critical": 0,
                "high": 0,
                "error": str(e)
            })

    # Display summary
    print("\n" + "=" * 70)
    print("Batch Scan Results:")
    print("=" * 70)

    for result in results:
        if "error" in result:
            print(f"\n{result['image']}: ✗ Error - {result['error']}")
        else:
            status = "⚠ ATTENTION" if result['critical'] > 0 or result['high'] > 0 else "✓ OK"
            print(f"\n{result['image']}: {status}")
            print(f"  Total: {result['total']}, CRITICAL: {result['critical']}, HIGH: {result['high']}")


if __name__ == "__main__":
    print("\n" + "=" * 70)
    print("Docker Vulnerability Scanning Examples (Grype-based)")
    print("=" * 70)
    print("\nNote: These examples require:")
    print("  - Grype installed (brew install grype OR curl -sSfL https://...)")
    print("  - Docker daemon running")
    print("  - Internet access (to pull images)")
    print()

    try:
        # Run all examples
        example1_basic_scan()
        example2_scan_with_severity_filter()
        example3_generate_report()
        example4_compare_images()
        example5_only_fixable_vulns()
        example6_multi_image_scan()

        print("\n" + "=" * 70)
        print("✓ All examples completed successfully!")
        print("=" * 70)
        print("\nNext steps:")
        print("  - Check the output/ directory for generated reports")
        print("  - Try the CLI: threat-radar cve scan-image <image>")
        print("  - See examples/CLI_EXAMPLES.md for more workflows")

    except Exception as e:
        print(f"\n❌ Error: {e}")
        import traceback
        traceback.print_exc()
        print("\nTroubleshooting:")
        print("  1. Install Grype: brew install grype (macOS) or see install.sh")
        print("  2. Ensure Docker daemon is running: docker ps")
        print("  3. Check internet connectivity")
        print("  4. See examples/TROUBLESHOOTING.md for more help")
