"""
Quick vulnerability demonstration.

This example shows vulnerability scanning with a pre-populated set of CVEs,
avoiding rate limit issues by using a focused approach.
"""
from threat_radar.core.container_analyzer import ContainerAnalyzer
from threat_radar.core.nvd_client import NVDClient
from threat_radar.core.cve_matcher import CVEMatcher
from threat_radar.utils import docker_analyzer
import json


def quick_demo():
    """Quick demonstration of vulnerability detection."""

    print("=" * 70)
    print("QUICK VULNERABILITY DETECTION DEMO")
    print("=" * 70)

    image = "ubuntu:18.04"

    # Step 1: Analyze container
    print(f"\n[1/4] Analyzing Docker image: {image}")
    with docker_analyzer() as analyzer:
        image_name, tag = image.split(':')
        analysis = analyzer.import_container(image_name, tag)

    print(f"     ‚úì Found {len(analysis.packages)} packages")
    print(f"     ‚úì Distribution: {analysis.distro} {analysis.distro_version}")

    # Show some key packages
    print(f"\nKey System Packages:")
    important_packages = ['bash', 'coreutils', 'gzip', 'tar', 'openssl',
                         'libssl', 'systemd', 'util-linux']
    for pkg in analysis.packages:
        if pkg.name in important_packages:
            print(f"  - {pkg.name} {pkg.version}")

    # Step 2: Fetch CVEs for specific packages
    print(f"\n[2/4] Fetching CVEs for key packages...")
    client = NVDClient()

    all_cves = []
    keywords = ['bash', 'gzip', 'tar']  # Limited to avoid rate limits

    for keyword in keywords:
        print(f"     Searching for {keyword} CVEs...")
        try:
            cves = client.search_cves(keyword=keyword, results_per_page=10)
            all_cves.extend(cves)
            print(f"     ‚úì Found {len(cves)} CVEs for {keyword}")
        except Exception as e:
            print(f"     ‚ö† Error fetching {keyword} CVEs: {e}")

    client.close()

    print(f"\n     Total CVEs loaded: {len(all_cves)}")

    # Step 3: Match packages against CVEs
    print(f"\n[3/4] Matching packages against CVEs...")
    matcher = CVEMatcher(min_confidence=0.6)
    matches = matcher.bulk_match_packages(analysis.packages, all_cves)

    vulnerable_count = len(matches)
    total_vulns = sum(len(m) for m in matches.values())

    print(f"     ‚úì Found {vulnerable_count} vulnerable packages")
    print(f"     ‚úì Total vulnerabilities detected: {total_vulns}")

    # Step 4: Display results
    print(f"\n[4/4] Vulnerability Findings:")
    print("=" * 70)

    if matches:
        for pkg_name in sorted(matches.keys()):
            pkg_matches = matches[pkg_name]

            # Sort by severity
            severity_order = {"CRITICAL": 0, "HIGH": 1, "MEDIUM": 2, "LOW": 3, None: 4}
            pkg_matches.sort(key=lambda m: (
                severity_order.get(m.cve.severity, 4),
                -(m.cve.cvss_score or 0)
            ))

            print(f"\nüì¶ Package: {pkg_name}")
            print(f"   Vulnerabilities: {len(pkg_matches)}")

            # Show top 3 for each package
            for i, match in enumerate(pkg_matches[:3], 1):
                severity_icon = {
                    "CRITICAL": "üî¥",
                    "HIGH": "üü†",
                    "MEDIUM": "üü°",
                    "LOW": "üü¢"
                }.get(match.cve.severity, "‚ö™")

                print(f"\n   {severity_icon} [{i}] {match.cve.cve_id}")
                print(f"       Severity: {match.cve.severity or 'N/A'}")
                print(f"       CVSS Score: {match.cve.cvss_score or 'N/A'}")
                print(f"       Confidence: {match.confidence:.0%}")
                print(f"       Match Reason: {match.match_reason}")

                # Truncate description
                desc = match.cve.description
                if len(desc) > 120:
                    desc = desc[:120] + "..."
                print(f"       Description: {desc}")

            if len(pkg_matches) > 3:
                print(f"\n   ... and {len(pkg_matches) - 3} more vulnerabilities")

        # Summary
        print("\n" + "=" * 70)
        print("SUMMARY")
        print("=" * 70)

        severity_breakdown = {}
        for pkg_matches in matches.values():
            for match in pkg_matches:
                sev = match.cve.severity or "UNKNOWN"
                severity_breakdown[sev] = severity_breakdown.get(sev, 0) + 1

        print(f"\nImage: {image}")
        print(f"Total Packages Scanned: {len(analysis.packages)}")
        print(f"Vulnerable Packages: {vulnerable_count}")
        print(f"Total Vulnerabilities: {total_vulns}")

        print(f"\nSeverity Breakdown:")
        for sev in ["CRITICAL", "HIGH", "MEDIUM", "LOW", "UNKNOWN"]:
            count = severity_breakdown.get(sev, 0)
            if count > 0:
                print(f"  {sev:8s}: {count:3d}")

        # Save detailed report
        report = {
            "image": image,
            "distribution": f"{analysis.distro} {analysis.distro_version}",
            "total_packages": len(analysis.packages),
            "vulnerable_packages": vulnerable_count,
            "total_vulnerabilities": total_vulns,
            "severity_breakdown": severity_breakdown,
            "findings": []
        }

        for pkg_name, pkg_matches in matches.items():
            for match in pkg_matches:
                report["findings"].append({
                    "package": pkg_name,
                    "cve_id": match.cve.cve_id,
                    "severity": match.cve.severity,
                    "cvss_score": match.cve.cvss_score,
                    "confidence": round(match.confidence, 2),
                    "match_reason": match.match_reason,
                    "description": match.cve.description
                })

        # Save report to output directory
        import os
        output_dir = os.path.join(os.path.dirname(__file__), '..', 'output')
        os.makedirs(output_dir, exist_ok=True)

        report_file = os.path.join(output_dir, "quick_vulnerability_demo.json")
        with open(report_file, 'w') as f:
            json.dump(report, f, indent=2)

        print(f"\nüìÑ Detailed report saved to: {report_file}")
    else:
        print("\n‚úÖ No vulnerabilities detected with current CVE set")
        print("   (Limited CVE search due to rate limits)")

    print("\n" + "=" * 70)
    print("‚úÖ DEMO COMPLETE")
    print("=" * 70)

    print("\nüí° Note:")
    print("   This demo uses a limited CVE set to avoid rate limits.")
    print("   For comprehensive scanning, use an NVD API key and populate")
    print("   the local database with: threat-radar cve update --days 365")


if __name__ == "__main__":
    try:
        quick_demo()
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  Demo interrupted by user")
    except Exception as e:
        print(f"\n\n‚ùå Error: {e}")
        import traceback
        traceback.print_exc()
