"""
Comprehensive CVE test against Debian 8 (Jessie).

Uses a broader CVE search to find actual vulnerabilities in this EOL distribution.
"""
from threat_radar.core.vulnerability_scanner import VulnerabilityScanner, ScanConfiguration
from threat_radar.utils.report_generator import VulnerabilityReportGenerator
from threat_radar.utils import docker_analyzer
import os


def comprehensive_debian8_scan():
    """Comprehensive scan of Debian 8 with broad CVE coverage."""

    print("=" * 70)
    print("COMPREHENSIVE VULNERABILITY SCAN: Debian 8 (Jessie)")
    print("=" * 70)

    image = "debian:8"

    print(f"\nTarget Image: {image}")
    print("Note: Debian 8 reached EOL in June 2020")
    print()

    # Step 1: Analyze container
    print("[1/5] Pulling and analyzing Docker image...")
    with docker_analyzer() as analyzer:
        image_name, tag = image.split(':')
        analysis = analyzer.import_container(image_name, tag)

    print(f"     ‚úì Found {len(analysis.packages)} packages")
    print(f"     ‚úì Distribution: {analysis.distro} {analysis.distro_version}")
    print(f"     ‚úì Architecture: {analysis.architecture}")

    # Show all packages
    print(f"\nAll Packages in Image:")
    for pkg in sorted(analysis.packages, key=lambda p: p.name)[:20]:
        print(f"  - {pkg.name:30s} {pkg.version}")
    if len(analysis.packages) > 20:
        print(f"  ... and {len(analysis.packages) - 20} more packages")

    # Step 2: Configure scanner with comprehensive CVE search
    print(f"\n[2/5] Fetching CVEs (broader search)...")

    config = ScanConfiguration(
        min_confidence=0.75,
        max_cve_age_years=15,
        filter_disputed=True,
        high_profile_cves=[
            'CVE-2014-6271',  # Shellshock
            'CVE-2014-0160',  # Heartbleed
            'CVE-2015-0235',  # GHOST
            'CVE-2016-5195',  # Dirty COW
        ],
        cve_search_keywords=[
            ('bash', 20),
            ('openssl', 30),
            ('glibc', 30),
            ('gnu', 30),
            ('debian', 25),
        ]
    )

    scanner = VulnerabilityScanner(config)

    print("     Fetching high-profile CVEs...")
    cves = scanner.fetch_cves(
        keywords=config.cve_search_keywords,
        cve_ids=config.high_profile_cves
    )

    print(f"\n     Total unique CVEs loaded: {len(cves)}")

    # Step 3: Show CVE age distribution
    print(f"\n[3/5] CVE Age Distribution...")
    from collections import Counter
    cve_years = []
    for cve in cves:
        if cve.published_date:
            try:
                if isinstance(cve.published_date, str):
                    year = int(cve.published_date[:4])
                else:
                    year = cve.published_date.year
                cve_years.append(year)
            except:
                pass

    year_counts = Counter(cve_years)
    for year in sorted(year_counts.keys(), reverse=True)[:10]:
        print(f"     {year}: {year_counts[year]} CVEs")

    # Step 4: Match with improved settings
    print(f"\n[4/5] Matching packages against {len(cves)} CVEs...")
    print(f"     Using improved matching with:")
    print(f"       - Confidence threshold: {config.min_confidence}")
    print(f"       - Max CVE age: {config.max_cve_age_years} years")
    print(f"       - Filter disputed CVEs: {config.filter_disputed}")

    matches = scanner.scan(analysis, cves)
    stats = scanner.calculate_statistics(matches)

    print(f"     ‚úì Found {stats['vulnerable_packages']} vulnerable packages")
    print(f"     ‚úì Total vulnerabilities detected: {stats['total_vulnerabilities']}")

    # Step 5: Display results with validation
    print(f"\n[5/5] Vulnerability Report:")
    print("=" * 70)

    reporter = VulnerabilityReportGenerator()

    if matches:
        # Print findings
        reporter.print_findings(matches, analysis, max_per_package=5)

        # Print summary
        reporter.print_summary(image, analysis, stats)

        # Get categorized findings
        true_positives, needs_review, potential_false_positives = scanner.categorize_findings(matches)

        # Print validation analysis
        reporter.print_validation_analysis(
            true_positives,
            needs_review,
            potential_false_positives
        )

        # Save report with validation metadata
        report = reporter.generate_json_report(
            image,
            analysis,
            matches,
            stats,
            additional_metadata={
                "total_cves_searched": len(cves),
                "validation": {
                    "true_positives": len(true_positives),
                    "needs_review": len(needs_review),
                    "potential_false_positives": len(potential_false_positives),
                    "estimated_precision": round(
                        (len(true_positives) / (len(true_positives) + len(needs_review) + len(potential_false_positives)) * 100)
                        if (len(true_positives) + len(needs_review) + len(potential_false_positives)) > 0 else 0,
                        2
                    )
                },
                "findings_categorized": {
                    "true_positives": [{"package": p, "cve": c, "confidence": conf} for p, c, conf in true_positives],
                    "needs_review": [{"package": p, "cve": c, "confidence": conf} for p, c, conf in needs_review],
                    "potential_false_positives": [{"package": p, "cve": c, "confidence": conf} for p, c, conf in potential_false_positives],
                }
            }
        )

        output_dir = os.path.join(os.path.dirname(__file__), '..', 'output')
        report_file = os.path.join(output_dir, "debian8_comprehensive_report.json")

        reporter.save_report(report, report_file)

        print(f"\nüìÑ Detailed report saved to: {report_file}")

        print("\n" + "=" * 70)
        print("‚úÖ SCAN COMPLETE")
        print("=" * 70)

    else:
        print("\n‚ö†Ô∏è  No vulnerabilities detected")

    print()


if __name__ == "__main__":
    print("\n" + "=" * 70)
    print("THREAT RADAR - COMPREHENSIVE DEBIAN 8 TEST")
    print("=" * 70)
    print()

    try:
        comprehensive_debian8_scan()
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  Scan interrupted by user")
    except Exception as e:
        print(f"\n\n‚ùå Error: {e}")
        import traceback
        traceback.print_exc()
