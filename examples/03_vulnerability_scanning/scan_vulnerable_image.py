"""
Scan a known vulnerable Docker image using Grype.

This example scans older versions of popular images that are known to contain
vulnerabilities, demonstrating the full vulnerability detection workflow with Grype.

Requirements:
- Grype installed (brew install grype OR curl -sSfL https://...)
- Docker daemon running
"""
from threat_radar.core.grype_integration import GrypeClient, GrypeSeverity
import json
from datetime import datetime
import os


def scan_vulnerable_image():
    """Scan an older image known to have vulnerabilities."""

    # Use an older Ubuntu version (known to have CVEs)
    image = "ubuntu:18.04"

    print("=" * 70)
    print("VULNERABILITY SCAN: Older Ubuntu Image with Known CVEs")
    print("=" * 70)

    print(f"\nTarget Image: {image}")
    print("Note: Using older image version to demonstrate vulnerability detection\n")

    # Initialize Grype client
    print("[1/3] Initializing Grype vulnerability scanner...")
    grype = GrypeClient()
    print("     ‚úì Grype is ready")

    # Scan the image
    print(f"\n[2/3] Scanning {image} for vulnerabilities...")
    print("     (This may take a few minutes - pulling image if needed)")

    scan_result = grype.scan_docker_image(image)

    print(f"     ‚úì Scan complete!")
    print(f"     ‚úì Found {scan_result.total_count} vulnerabilities")

    # Generate and display results
    print(f"\n[3/3] Analyzing results...")

    if scan_result.total_count > 0:
        # Display findings
        print("\n" + "=" * 70)
        print("VULNERABILITY FINDINGS")
        print("=" * 70)

        # Severity breakdown
        print("\nSeverity Breakdown:")
        for severity in ['critical', 'high', 'medium', 'low', 'negligible']:
            count = scan_result.severity_counts.get(severity, 0)
            if count > 0:
                print(f"  {severity.upper():12s}: {count}")

        # Display top vulnerabilities
        # Sort by severity
        severity_order = {'critical': 4, 'high': 3, 'medium': 2, 'low': 1, 'negligible': 0}
        sorted_vulns = sorted(
            scan_result.vulnerabilities,
            key=lambda v: severity_order.get(v.severity.lower(), 0),
            reverse=True
        )

        print(f"\nTop 20 Vulnerabilities (sorted by severity):")
        print("-" * 70)

        for i, vuln in enumerate(sorted_vulns[:20], 1):
            fixed_str = f"‚Üí {vuln.fixed_in_version}" if vuln.fixed_in_version else "(no fix available)"
            print(f"\n{i}. {vuln.id} - {vuln.severity.upper()}")
            print(f"   Package: {vuln.package_name}@{vuln.package_version}")
            print(f"   Fix: {fixed_str}")
            if vuln.cvss_score:
                print(f"   CVSS: {vuln.cvss_score}")

        # Generate detailed report
        print(f"\n" + "=" * 70)
        print("GENERATING DETAILED REPORT")
        print("=" * 70)

        report = {
            "scan_date": datetime.now().isoformat(),
            "scanner": "Grype",
            "target": scan_result.target,
            "summary": {
                "total_vulnerabilities": scan_result.total_count,
                "severity_counts": scan_result.severity_counts,
            },
            "vulnerabilities": []
        }

        # Add all vulnerabilities to report
        for vuln in scan_result.vulnerabilities:
            report["vulnerabilities"].append({
                "id": vuln.id,
                "severity": vuln.severity,
                "package_name": vuln.package_name,
                "package_version": vuln.package_version,
                "package_type": vuln.package_type,
                "fixed_in_version": vuln.fixed_in_version,
                "description": vuln.description,
                "cvss_score": vuln.cvss_score,
                "urls": vuln.urls,
                "data_source": vuln.data_source,
            })

        # Save report
        output_dir = os.path.join(os.path.dirname(__file__), '..', 'output')
        os.makedirs(output_dir, exist_ok=True)

        safe_name = image.replace(':', '_').replace('/', '_')
        report_file = os.path.join(output_dir, f"{safe_name}_vulnerability_report.json")

        with open(report_file, 'w') as f:
            json.dump(report, f, indent=2)

        print(f"\nüìÑ Detailed report saved to: {report_file}")

        # Summary
        print("\n" + "=" * 70)
        print("SCAN COMPLETE")
        print("=" * 70)
        print(f"\n‚úì Found {len([v for v in sorted_vulns if v.severity.lower() == 'critical'])} CRITICAL vulnerabilities")
        print(f"‚úì Found {len([v for v in sorted_vulns if v.severity.lower() == 'high'])} HIGH vulnerabilities")
        print(f"‚úì Total vulnerabilities: {scan_result.total_count}")
        print(f"\n‚úÖ Report saved: {report_file}")

    else:
        print("\n‚úì No vulnerabilities found!")
        print("   (This is unusual for ubuntu:18.04 - check Grype database is updated)")


def scan_multiple_vulnerable_images():
    """Scan multiple known-vulnerable images for comparison."""

    print("\n" + "=" * 70)
    print("SCANNING MULTIPLE VULNERABLE IMAGES")
    print("=" * 70)

    images = [
        "ubuntu:14.04",  # Very old, many vulns
        "ubuntu:18.04",  # Older, moderate vulns
        "ubuntu:22.04",  # Recent, fewer vulns
    ]

    grype = GrypeClient()
    results = []

    for image in images:
        print(f"\nScanning {image}...")

        try:
            scan_result = grype.scan_docker_image(image)

            results.append({
                "image": image,
                "total": scan_result.total_count,
                "critical": scan_result.severity_counts.get('critical', 0),
                "high": scan_result.severity_counts.get('high', 0),
                "medium": scan_result.severity_counts.get('medium', 0),
            })

            print(f"  ‚úì {scan_result.total_count} vulnerabilities found")

        except Exception as e:
            print(f"  ‚úó Error: {e}")
            results.append({"image": image, "error": str(e)})

    # Display comparison
    print("\n" + "=" * 70)
    print("COMPARISON RESULTS")
    print("=" * 70)

    for result in results:
        if "error" in result:
            print(f"\n{result['image']}: ‚úó Error - {result['error']}")
        else:
            print(f"\n{result['image']}:")
            print(f"  Total:    {result['total']}")
            print(f"  CRITICAL: {result['critical']}")
            print(f"  HIGH:     {result['high']}")
            print(f"  MEDIUM:   {result['medium']}")

    # Recommendation
    valid_results = [r for r in results if "error" not in r]
    if valid_results:
        safest = min(valid_results, key=lambda x: x['total'])
        print(f"\n‚úì Safest image: {safest['image']} ({safest['total']} vulnerabilities)")


if __name__ == "__main__":
    try:
        # Scan single vulnerable image
        scan_vulnerable_image()

        # Optional: Scan multiple images for comparison
        # Uncomment to run:
        # scan_multiple_vulnerable_images()

        print("\n" + "=" * 70)
        print("Example completed successfully!")
        print("=" * 70)

    except Exception as e:
        print(f"\n‚ùå Error: {e}")
        import traceback
        traceback.print_exc()
        print("\nTroubleshooting:")
        print("  1. Install Grype: brew install grype (macOS)")
        print("  2. Ensure Docker is running: docker ps")
        print("  3. Check Grype database: threat-radar cve db-status")
        print("  4. Update database: threat-radar cve db-update")
