"""
Complete Docker vulnerability scanning workflow.

This example demonstrates:
- Analyzing a Docker image
- Extracting packages
- Matching against CVE database
- Generating vulnerability reports
"""
from threat_radar.core.container_analyzer import ContainerAnalyzer
from threat_radar.core.cve_database import CVEDatabase
from threat_radar.core.cve_matcher import CVEMatcher
from threat_radar.utils import docker_analyzer
import json
from datetime import datetime


def example1_basic_scan():
    """Example 1: Basic vulnerability scan of a Docker image."""
    print("=" * 60)
    print("Example 1: Basic Docker Image Vulnerability Scan")
    print("=" * 60)

    image = "alpine:3.18"

    print(f"\n1. Analyzing Docker image: {image}")
    with docker_analyzer() as analyzer:
        analysis = analyzer.analyze_container(image)

    print(f"\n✓ Analysis complete")
    print(f"  Image: {analysis.image_name}")
    print(f"  Distribution: {analysis.distro} {analysis.distro_version}")
    print(f"  Packages found: {len(analysis.packages)}")
    print(f"  Architecture: {analysis.architecture}")

    if analysis.packages:
        print(f"\nSample packages:")
        for pkg in analysis.packages[:5]:
            print(f"  - {pkg.name} {pkg.version}")


def example2_scan_with_cve_matching():
    """Example 2: Scan with CVE matching."""
    print("\n" + "=" * 60)
    print("Example 2: Docker Scan with CVE Matching")
    print("=" * 60)

    image = "ubuntu:20.04"

    # Step 1: Analyze container
    print(f"\n1. Analyzing Docker image: {image}")
    with docker_analyzer() as analyzer:
        analysis = analyzer.analyze_container(image)

    print(f"   Found {len(analysis.packages)} packages")

    # Step 2: Update CVE database
    print(f"\n2. Updating CVE database...")
    db = CVEDatabase()
    count = db.update_from_nvd(days=30, force=False)
    print(f"   Database contains {count} recent CVEs")

    # Step 3: Get CVEs from database
    print(f"\n3. Loading CVEs from database...")
    cves = db.search_cves(limit=1000)
    print(f"   Loaded {len(cves)} CVEs for matching")

    # Step 4: Match packages against CVEs
    print(f"\n4. Matching packages against CVEs...")
    matcher = CVEMatcher(min_confidence=0.7)
    matches = matcher.bulk_match_packages(analysis.packages, cves)

    # Step 5: Display results
    print(f"\n5. Results:")
    if matches:
        print(f"\n   ⚠ Found vulnerabilities in {len(matches)} packages:\n")
        for pkg_name, pkg_matches in matches.items():
            print(f"   📦 {pkg_name}:")
            for match in pkg_matches[:3]:
                print(f"      • {match.cve.cve_id} - {match.cve.severity} "
                      f"(Confidence: {match.confidence:.0%})")
                print(f"        {match.cve.description[:100]}...")
    else:
        print("\n   ✓ No vulnerabilities found")

    db.close()


def example3_generate_report():
    """Example 3: Generate detailed vulnerability report."""
    print("\n" + "=" * 60)
    print("Example 3: Generate Vulnerability Report")
    print("=" * 60)

    image = "alpine:3.18"

    # Analyze image
    print(f"\nAnalyzing {image}...")
    with docker_analyzer() as analyzer:
        analysis = analyzer.analyze_container(image)

    # Get CVEs
    db = CVEDatabase()
    db.update_from_nvd(days=30, force=False)
    cves = db.search_cves(limit=1000)

    # Match
    matcher = CVEMatcher(min_confidence=0.7)
    matches = matcher.bulk_match_packages(analysis.packages, cves)

    # Generate report
    report = {
        "scan_date": datetime.now().isoformat(),
        "image": analysis.image_name,
        "distribution": f"{analysis.distro} {analysis.distro_version}",
        "architecture": analysis.architecture,
        "total_packages": len(analysis.packages),
        "vulnerable_packages": len(matches),
        "vulnerabilities": []
    }

    # Add vulnerability details
    for pkg_name, pkg_matches in matches.items():
        for match in pkg_matches:
            report["vulnerabilities"].append({
                "package": pkg_name,
                "cve_id": match.cve.cve_id,
                "severity": match.cve.severity,
                "cvss_score": match.cve.cvss_score,
                "confidence": round(match.confidence, 2),
                "description": match.cve.description,
                "match_reason": match.match_reason,
            })

    # Save report
    report_file = f"vulnerability_report_{analysis.image_name.replace(':', '_')}.json"
    with open(report_file, 'w') as f:
        json.dump(report, f, indent=2)

    print(f"\n✓ Report generated: {report_file}")
    print(f"\nReport Summary:")
    print(f"  Total Packages: {report['total_packages']}")
    print(f"  Vulnerable: {report['vulnerable_packages']}")
    print(f"  Total Vulnerabilities: {len(report['vulnerabilities'])}")

    # Severity breakdown
    if report['vulnerabilities']:
        severity_count = {}
        for vuln in report['vulnerabilities']:
            sev = vuln['severity'] or 'UNKNOWN'
            severity_count[sev] = severity_count.get(sev, 0) + 1

        print(f"\n  By Severity:")
        for sev in ['CRITICAL', 'HIGH', 'MEDIUM', 'LOW']:
            if sev in severity_count:
                print(f"    {sev}: {severity_count[sev]}")

    db.close()


def example4_compare_images():
    """Example 4: Compare vulnerabilities between two images."""
    print("\n" + "=" * 60)
    print("Example 4: Compare Images for Vulnerabilities")
    print("=" * 60)

    images = ["alpine:3.17", "alpine:3.18"]

    # Update database once
    db = CVEDatabase()
    db.update_from_nvd(days=30, force=False)
    cves = db.search_cves(limit=1000)

    matcher = CVEMatcher(min_confidence=0.7)

    results = {}

    for image in images:
        print(f"\nScanning {image}...")
        with docker_analyzer() as analyzer:
            analysis = analyzer.analyze_container(image)

        matches = matcher.bulk_match_packages(analysis.packages, cves)

        results[image] = {
            "packages": len(analysis.packages),
            "vulnerable": len(matches),
            "total_vulns": sum(len(m) for m in matches.values())
        }

    # Compare
    print("\n" + "=" * 60)
    print("Comparison Results:")
    print("=" * 60)

    for image, stats in results.items():
        print(f"\n{image}:")
        print(f"  Packages: {stats['packages']}")
        print(f"  Vulnerable Packages: {stats['vulnerable']}")
        print(f"  Total Vulnerabilities: {stats['total_vulns']}")

    # Determine safer image
    safer = min(results.items(), key=lambda x: x[1]['total_vulns'])
    print(f"\n✓ Recommendation: {safer[0]} has fewer vulnerabilities")

    db.close()


def example5_filter_by_severity():
    """Example 5: Scan and filter by severity."""
    print("\n" + "=" * 60)
    print("Example 5: Filter Vulnerabilities by Severity")
    print("=" * 60)

    image = "ubuntu:22.04"

    # Analyze
    print(f"\nAnalyzing {image}...")
    with docker_analyzer() as analyzer:
        analysis = analyzer.analyze_container(image)

    # Get only HIGH and CRITICAL CVEs
    db = CVEDatabase()
    db.update_from_nvd(days=30, force=False)

    print(f"\nFetching HIGH and CRITICAL CVEs...")
    high_cves = db.search_cves(severity="HIGH", limit=500)
    critical_cves = db.search_cves(severity="CRITICAL", limit=500)
    all_cves = high_cves + critical_cves

    print(f"  HIGH: {len(high_cves)}")
    print(f"  CRITICAL: {len(critical_cves)}")

    # Match
    matcher = CVEMatcher(min_confidence=0.7)
    matches = matcher.bulk_match_packages(analysis.packages, all_cves)

    # Display only critical issues
    print(f"\nCritical Issues:")
    critical_count = 0
    for pkg_name, pkg_matches in matches.items():
        for match in pkg_matches:
            if match.cve.severity == "CRITICAL":
                critical_count += 1
                print(f"\n  🔴 {match.cve.cve_id}")
                print(f"     Package: {pkg_name}")
                print(f"     CVSS: {match.cve.cvss_score}")
                print(f"     {match.cve.description[:100]}...")

    if critical_count == 0:
        print("\n  ✓ No CRITICAL vulnerabilities found")

    db.close()


def example6_continuous_monitoring():
    """Example 6: Simulate continuous monitoring."""
    print("\n" + "=" * 60)
    print("Example 6: Continuous Monitoring Simulation")
    print("=" * 60)

    images_to_monitor = ["alpine:3.18", "nginx:alpine"]

    print("\nSimulating daily vulnerability monitoring...")

    db = CVEDatabase()

    for day in range(1, 4):  # Simulate 3 days
        print(f"\n--- Day {day} ---")

        # Update CVE database (in real scenario, this runs daily)
        print("  Updating CVE database...")
        count = db.update_from_nvd(days=1, force=True)
        print(f"  Added {count} new CVEs")

        # Scan each image
        for image in images_to_monitor:
            print(f"\n  Scanning {image}...")

            with docker_analyzer() as analyzer:
                analysis = analyzer.analyze_container(image)

            cves = db.search_cves(limit=1000)
            matcher = CVEMatcher(min_confidence=0.7)
            matches = matcher.bulk_match_packages(analysis.packages, cves)

            vuln_count = sum(len(m) for m in matches.values())

            if vuln_count > 0:
                print(f"    ⚠ {vuln_count} vulnerabilities detected")
                # In real scenario, send alert here
            else:
                print(f"    ✓ No new vulnerabilities")

    db.close()


if __name__ == "__main__":
    print("\n" + "=" * 60)
    print("Docker Vulnerability Scanning Examples")
    print("=" * 60)
    print("\nNote: These examples require:")
    print("  - Docker daemon running")
    print("  - Internet access for CVE updates")
    print("  - Images to be pulled first time")
    print()

    try:
        example1_basic_scan()

        print("\n\nNote: Remaining examples commented out to save time")
        print("      Uncomment to run full workflow")

        # example2_scan_with_cve_matching()
        # example3_generate_report()
        # example4_compare_images()
        # example5_filter_by_severity()
        # example6_continuous_monitoring()

        print("\n" + "=" * 60)
        print("Examples completed successfully!")
        print("=" * 60)

    except Exception as e:
        print(f"\n❌ Error: {e}")
        import traceback
        traceback.print_exc()
        print("\nMake sure:")
        print("  1. Docker daemon is running")
        print("  2. You have internet access")
        print("  3. Required images are available")
